export const GENERATED_EDITOR_LIB = "/**\n * @monaco\n */\ninterface IBeesContractService {\n    findTopByDdc(maxResults: number, ddc: string, env: CountryEnvironmentModel): Promise<WrappedResponse<PageWithPagination<BeesContract>>>;\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface BeesContract {\n    id: string;\n    vendorAccountId: string;\n    vendorId: string;\n    accountId: string;\n    legacyAccountId: string;\n    customerAccountId: string;\n    displayName: string;\n    legalName: string;\n    deliveryScheduleId: string;\n    deliveryCenterId: string;\n    taxId: string;\n    priceListId: string;\n    additionalInformation: any;\n    challengeIds: string[];\n    channel: string;\n    createdAt: string;\n    updatedAt: string;\n    deliveryAddress: BeesAccountAddress;\n    liquorLicense: string[];\n    maximumOrder: BeesAccountMaximumOrder;\n    minimumOrder: BeesAccountMinimumOrder;\n    owner: BeesAccountOwner;\n    paymentMethods: string[];\n    paymentTerms: BeesAccountPaymentTerm[];\n    potential: string;\n    representatives: BeesAccountRepresentative[];\n    segment: string;\n    status: string;\n    timezone: string;\n    classificationType: string;\n    businessAttributes: any[];\n    hasEmptiesLoan: boolean;\n    hasOverprice: boolean;\n    hasPONumberRequirement: boolean;\n    isKeyAccount: boolean;\n} /**\n * @monaco\n */\ninterface DeliveryWindowPayload {\n    deliveryScheduleId: string;\n    startDate: string;\n    expirationDate: string;\n    endDate: string;\n    vendorId: string | null;\n    id: string;\n    alternative: boolean | null;\n} /**\n * @monaco\n */\ninterface IDeliveryWindowService {\n    createDeliveryWindow(payload: DeliveryWindowPayload, env?: CountryEnvironmentModel): Promise<WrappedResponse<any>>;\n} /**\n * @monaco\n */\ninterface CreateLocalAccountPayload {\n    name: string;\n    envId: number;\n    beesId: string;\n    customerAccountId: string;\n    vendorAccountId: string;\n} /**\n * @monaco\n */\ninterface LocalAccountQuery {\n    page: LocalPageRequest;\n    sort: SortQuery;\n    env: number | null;\n    name?: string;\n    id?: string;\n    beesId?: string;\n    vendorAccountId?: string;\n    customerAccountId?: string;\n} /**\n * @monaco\n */\ninterface ILocalAccountService {\n    searchAccounts(query: LocalAccountQuery): Promise<Page<LocalAccount>>;\n    createAccount(payload: CreateLocalAccountPayload): Promise<LocalAccount>;\n    createFromBeesAccountIfNotExists(env: CountryEnvironmentModel, beesAccount: AccountV1): Promise<LocalAccount | null>;\n    newQuery(): LocalAccountQuery;\n} /**\n * @monaco\n */\ninterface LocalAccount {\n    name: string;\n    envId: number;\n    env: CountryEnvironmentModel;\n    beesId: string;\n    customerAccountId: string;\n    vendorAccountId: string;\n} /**\n * @monaco\n */\ninterface AccountV1SearchQuery {\n    accountId?: string;\n    vendorAccountId?: string;\n    customerAccountId?: string;\n    taxId?: string;\n    vendorId?: string;\n    page: PageRequest;\n    toBeesQueryParams(): BeesParam[];\n} /**\n * @monaco\n */\ninterface IAccountV1Service {\n    searchAccounts(query: AccountV1SearchQuery, env?: CountryEnvironmentModel): Promise<WrappedResponse<AccountV1[]>>;\n    findOne(env: CountryEnvironmentModel, vendorAccountId?: string, customerAccountId?: string): Promise<AccountV1 | null>;\n    newQuery(): AccountV1SearchQuery;\n} interface BeesAccountOwner {\n    email?: string;\n    firstName?: string;\n    lastName?: string;\n    phone?: string;\n} interface Credit {\n    balance?: number;\n    overdue?: number;\n    available?: number;\n    paymentTerms?: string | null;\n    total?: number;\n    updatedAt?: string;\n    consumption?: number;\n} interface BeesAccountAddress {\n    address?: string;\n    city?: string;\n    state?: string;\n    zipcode?: string;\n    latitude?: string;\n    longitude?: string;\n} interface DeliveryWindow {\n    updatedAt?: string;\n    deliveryWindowId?: string;\n    deliveryScheduleId?: string;\n    startDate?: string;\n    endDate?: string;\n    expirationDate?: string;\n    alternative?: boolean;\n    vendorId?: string;\n} interface SalesRepresentative {\n    email?: string;\n    name?: string;\n    phone?: string;\n} interface Supervisor {\n    email?: string;\n    name?: string;\n    phone?: string;\n} interface BeesAccountRepresentative {\n    email?: string;\n    name?: string;\n    phone?: string;\n    primary?: boolean;\n    productTypes?: string[];\n    role?: string;\n    supervisor?: Supervisor;\n} interface TermPeriod {\n    days?: number;\n} interface BeesAccountPaymentTerm {\n    type?: string;\n    termPeriods?: TermPeriod[];\n} interface LiquorLicense {\n    description?: string;\n    expirationDate?: string;\n    number?: string;\n    status?: string;\n    type?: string;\n} interface BeesAccountMinimumOrder {\n    type?: string;\n    value?: number;\n    paymentMethods?: string[];\n} interface BeesAccountMaximumOrder {\n    type?: string;\n    value?: number;\n    paymentMethods?: string[];\n} interface Contact {\n    type?: string;\n    value?: string;\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface AccountV1 {\n    country: string;\n    updatedAt: string;\n    accountId: string;\n    vendorId: string;\n    vendorAccountId: string;\n    customerAccountId: string;\n    credit?: Credit;\n    deliveryAddress?: BeesAccountAddress;\n    billingAddress?: BeesAccountAddress;\n    deliveryCenterId?: string;\n    deliveryScheduleId?: string;\n    deliveryWindows?: DeliveryWindow[];\n    liquorLicense?: LiquorLicense[];\n    name: string;\n    owner?: BeesAccountOwner;\n    paymentMethods: string[];\n    priceListId?: string;\n    salesRepresentative?: SalesRepresentative;\n    status: string;\n    taxId?: string | null;\n    paymentTerms?: BeesAccountPaymentTerm[];\n    minimumOrder?: BeesAccountMinimumOrder;\n    maximumOrder?: BeesAccountMaximumOrder;\n    segment?: string;\n    channel?: string;\n    subSegment?: string;\n    erpSalesCenter?: string;\n    salesRoute?: string;\n    potential?: string;\n    deliveryRegion?: string;\n    deliveryRoute?: string;\n    contacts?: Contact[];\n    challengeIds?: string[];\n    createdAt?: string;\n    legalName?: string;\n    displayName?: string;\n    timezone?: string;\n    representatives?: BeesAccountRepresentative[];\n    hasEmptiesLoan?: boolean;\n    hasOverprice?: boolean;\n    hasPONumberRequirement?: boolean;\n    isKeyAccount?: boolean;\n} /**\n * @monaco\n */\nenum BeesEntity {\n    ACCOUNTS = 'ACCOUNTS',\n    CONTRACTS = 'CONTRACTS',\n    CREDITS = 'CREDITS',\n    DELIVERY_WINDOWS = 'DELIVERY_WINDOWS',\n    DEALS = 'DEALS',\n    PROMOTIONS = 'PROMOTIONS',\n    REWARDS_SETTINGS = 'REWARDS_SETTINGS',\n    SEGMENTATION = 'SEGMENTATION',\n    CHALLENGES = 'CHALLENGES',\n    ITEMS = 'ITEMS',\n    PRODUCT_ASSORTMENT_INCLUSION = 'PRODUCT_ASSORTMENT_INCLUSION',\n    BEES_STORAGE = 'BEES_STORAGE',\n    CMS_STORAGE = 'CMS_STORAGE',\n    ORDERS = 'ORDERS',\n    INVENTORY = 'INVENTORY',\n    CATEGORIES = 'CATEGORIES',\n    PRICES = 'PRICES',\n    DATA_RECOMMENDATION = 'DATA_RECOMMENDATION',\n    GROW = 'GROW',\n    NON_REQUEST_TEMPLATE = 'NON_REQUEST_TEMPLATE',\n    VENDOR = 'VENDOR',\n    RATINGS = 'RATINGS'\n} /**\n * @monaco\n */\ninterface BeesParam {\n    name: string;\n    value: number | string | boolean | null;\n} interface LineItemDealCondition {\n    vendorItemIds: string[];\n    minimumQuantity?: number;\n    sharedMinimumQuantity?: boolean;\n    crossDiscount?: boolean;\n} interface SimulationDateTimeCondition {\n    endDateTime: string;\n    startDateTime: string;\n} interface DeliveryDateCondition {\n    startDate: string;\n    endDate?: string;\n} interface AmountCondition {\n    scope: DealConditionAmountScope;\n    operator: DealConditionAmountOperator;\n    field: DealConditionAmountField;\n    value: number;\n} interface MultipleLineItemCondition {\n    items: MultipleLineItemItemCondition[];\n} interface MultipleLineItemItemCondition {\n    vendorItemIds: string[];\n    minimumQuantity?: number;\n    minimumAmount?: number;\n} interface LineItemOutput {\n    vendorItemIds: string[];\n    type: DealDiscountType;\n    value: number;\n    maxQuantity?: number;\n    proportion?: number;\n} interface MultipleLineItemOutput {\n    type: DealDiscountType;\n    items: MultipleLineItemOutputItem[];\n    proportion?: number;\n    comboType?: DealComboType;\n} interface MultipleLineItemOutputItem {\n    vendorItemId: string;\n    value: number;\n    maxQuantity?: number;\n} interface OrderTotalScaledDiscountOutput {\n    ranges: OrderTotalScaledDiscountOutputRange[];\n} interface OrderTotalScaledDiscountOutputRange {\n    from: number;\n    to: number;\n    type: DealDiscountType;\n    discount: number;\n    applyTo: DealOrderTotalApplyTo;\n} interface MultiItemScaledByMinQtyOutput {\n    ranges: MultiItemScaledByMinQtyOutputRange[];\n} interface MultiItemScaledByMinQtyOutputRange {\n    from: number;\n    to: number;\n    type: DealDiscountType;\n    value: number;\n} interface OrderTotalDiscountOutput {\n    type: DealDiscountType;\n    discount?: number;\n    proportion?: number;\n    maxAmount?: number;\n} interface PalletDiscountOutput {\n    discount?: number;\n    proportion?: number;\n    measureUnit?: string;\n} interface LineItemScaledDiscountOutput {\n    vendorItemIds: string[];\n    ranges: LineItemScaledDiscountOutputRange[];\n} interface LineItemScaledDiscountOutputRange {\n    from: number;\n    to?: number;\n    proportion?: number;\n    type: DealDiscountType;\n    value: number;\n    maxQuantity?: number;\n} interface MultiLineItemScaledDiscountOutput {\n    ranges: MultiLineItemScaledDiscountOutputRange[];\n} interface MultiLineItemScaledDiscountOutputRange {\n    from: number;\n    to?: number;\n    proportion?: number;\n    type: DealDiscountType;\n    items: MultiLineItemScaledDiscountOutputRangeItem[];\n} interface MultiLineItemScaledDiscountOutputRangeItem {\n    vendorItemId: string;\n    value: number;\n    maxQuantity?: number;\n} interface FreeGoodOutput {\n    proportion: number;\n    proportionAmount: number;\n    partial: boolean;\n    items: FreeGoodOutputItem[];\n} interface FreeGoodOutputItem {\n    quantity: number;\n    vendorItems: FreeGoodOutputItemVendorItem[];\n} interface FreeGoodOutputItemVendorItem {\n    vendorItemId: string;\n    measureUnit: string;\n    price: number;\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface Deal {\n    deliveryCenterId?: string;\n    contractId: string;\n    vendorDealId: string;\n    vendorPromotionId: string;\n    accumulationType?: DealAccumulationType;\n    priority?: number;\n    level?: number;\n    timezone: string;\n    vendorId: string;\n    hiddenOnBrowse: boolean;\n    hiddenOnDeals: boolean;\n    dealType: DealOutputType;\n    enforced: boolean;\n    enableVariantGroupingAndConversion: boolean;\n    conditions?: DealConditions;\n    output: DealOutput;\n} interface DealConditions {\n    //TODO: Define all fields\n    lineItem?: LineItemDealCondition;\n    simulationDateTime?: SimulationDateTimeCondition;\n    deliveryDate?: DeliveryDateCondition[];\n    amounts?: AmountCondition[];\n    multipleLineItem?: MultipleLineItemCondition;\n} interface DealOutput {\n    lineItemDiscount?: LineItemOutput;\n    lineItemScaledDiscount?: LineItemScaledDiscountOutput;\n    multipleLineItemDiscount?: MultipleLineItemOutput;\n    orderTotalScaledDiscount?: OrderTotalScaledDiscountOutput;\n    multipleLineItemScaledDiscountSkuPool?: MultiItemScaledByMinQtyOutput;\n    orderTotalDiscount?: OrderTotalDiscountOutput;\n    palletDiscount?: PalletDiscountOutput;\n    multipleLineItemScaledDiscount?: MultiLineItemScaledDiscountOutput;\n    freeGoods: FreeGoodOutput;\n} /**\n * @monaco\n */\ninterface DealsSearchResponse {\n    deals: Deal[];\n    pagination: HasMorePagination;\n} /**\n * @monaco\n */\ninterface IDealsService {\n    searchDeals(query: DealsSearchQuery, env?: CountryEnvironmentModel): Promise<WrappedResponse<DealsSearchResponse>>;\n    deleteDeals(payload: DeleteDealsPayload, env: CountryEnvironmentModel): Promise<WrappedResponse<any>>;\n    createDeals(payload: CreateDealsPayload, env: CountryEnvironmentModel): Promise<WrappedResponse<any>>;\n    newQuery(): DealsSearchQuery;\n} /**\n * @monaco\n */\nenum DealAccumulationType {\n    ADD = 'ADD',\n    COMPOSE = 'COMPOSE',\n    UNIQUE = 'UNIQUE',\n    HIGH = 'HIGH',\n    LOW = 'LOW'\n} /**\n * @monaco\n */\nenum DealComboType {\n    FIXED_COMBO = 'FIXED_COMBO',\n    INTERACTIVE_COMBO = 'INTERACTIVE_COMBO'\n} /**\n * @monaco\n */\nenum DealDiscountType {\n    PERCENT_OFF = 'PERCENT_OFF',\n    '%' = '%',\n    AMOUNT_OFF = 'AMOUNT_OFF',\n    '$' = '$',\n    PROMOTIONAL_PRICE = 'PROMOTIONAL_PRICE',\n    '@' = '@'\n} /**\n * @monaco\n */\nenum DealIdType {\n    ACCOUNT = 'ACCOUNT',\n    VENDOR = 'VENDOR',\n    DELIVERY_CENTER = 'DELIVERY_CENTER',\n    PRICE_LIST = 'PRICE_LIST'\n} /**\n * @monaco\n */\nenum DealOutputType {\n    PALLET_DISCOUNT = 'PALLET_DISCOUNT',\n    REGULAR_DISCOUNT = 'REGULAR_DISCOUNT',\n    ORDER_DISCOUNT = 'ORDER_DISCOUNT',\n    FREE_GOOD = 'FREE_GOOD',\n    FLEXIBLE_DISCOUNT = 'FLEXIBLE_DISCOUNT',\n    SCALED_DISCOUNT = 'SCALED_DISCOUNT',\n    SCALED_FREE_GOOD = 'SCALED_FREE_GOOD',\n    SPECIAL_OFFERS = 'SPECIAL_OFFERS'\n} /**\n * @monaco\n */\nenum DealType {\n    PRICE_REDUCTION = 'PRICE_REDUCTION',\n    REFERRAL_COUPON = 'REFERRAL_COUPON',\n    REWARD_COUPON = 'REWARD_COUPON',\n    UNDEFINED = 'UNDEFINED',\n    SPECIAL_OFFERS = 'SPECIAL_OFFERS',\n    POSTOFF = 'POSTOFF',\n    STEPPED_SKU_POOL_DISCOUNT = 'STEPPED_SKU_POOL_DISCOUNT'\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface CreateDealsPayload {\n    ids: string[];\n    type: DealIdType;\n    deals: DealPayload[];\n} interface DealPayload {\n    vendorDealId: string;\n    vendorPromotionId: string;\n    accumulationType?: DealAccumulationType | null;\n    level?: number | null;\n    priority?: number | null;\n    type?: DealType | null;\n    couponBaseName?: string | null;\n    enforced?: boolean | null;\n    hiddenOnBrowse?: boolean | null;\n    enableVariantGroupingAndConversion?: boolean | null;\n    //TODO: Define those too\n    conditions?: any;\n    output: any;\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface DealsSearchQuery {\n    types: DealOutputType[];\n    page: PageRequest;\n    ignoreStartDate?: boolean;\n    ignoreEndDate?: boolean;\n    body: DealsSearchQueryBody;\n    toBeesQueryParams(): BeesParam[];\n} interface DealsSearchQueryBody {\n    contractId?: string;\n    couponCode: string[];\n    deliveryCenterId?: string;\n    deliveryDate?: string;\n    firstOrder?: boolean;\n    hiddenOnDeals?: boolean;\n    hiddenOnBrowse?: boolean;\n    itemIds: string[];\n    orderSubtotal?: number;\n    orderTotal?: number;\n    paymentMethod?: string;\n    priceListId?: string;\n    vendorDealId?: string;\n    vendorId?: string;\n    vendorPromotionIds: string[];\n    sanitize(): DealsSearchQueryBody;\n} /**\n * @monaco\n */\ninterface CountryEnvironmentCredsPayload {\n    envId: string;\n    clientId: string;\n    clientSecret: string;\n} /**\n * @monaco\n */\ninterface CountryEnvironmentLanguageModel {\n    languageCode: string;\n    defaultLanguage: boolean;\n} /**\n * @monaco\n */\ninterface CountryEnvironmentModel {\n    id: number;\n    envName: string;\n    env: Env;\n    countryCode: string;\n    vendorId: string;\n    storeId: string;\n    timezone: string;\n    defaultLanguage: CountryEnvironmentLanguageModel;\n    languages: CountryEnvironmentLanguageModel[];\n    singleLanguage: boolean;\n} /**\n * @monaco\n */\ninterface ICountryEnvironmentService {\n    createEnv(payload: CountryEnvironmentPayload): Promise<WrappedResponseLocal<CountryEnvironmentModel>>;\n    findByVendorId(vendorId: string): Promise<CountryEnvironmentModel[]>;\n    updateCreds(payload: CountryEnvironmentCredsPayload): Promise<boolean>;\n    save(env: CountryEnvironmentModel): Promise<IWrappedResponseLocal<CountryEnvironmentModel>>;\n} /**\n * @monaco\n */\nenum Env {\n    SIT_GLOBAL = 'SIT_GLOBAL',\n    UAT_EU = 'UAT_EU',\n    UAT_US = 'UAT_US',\n    UAT = 'UAT',\n    PROD = 'PROD',\n    PROD_EU = 'PROD_EU',\n    PROD_US = 'PROD_US'\n} /**\n * @monaco\n */\ninterface SharedClientToken {\n    token: string;\n} /**\n * @monaco\n */\ninterface SharedClientPayload {\n    name: string;\n    clientId: string;\n    clientSecret: string;\n    countryCode: string | null;\n    vendorId: string | null;\n    env: Env;\n    targetEntities: BeesEntity[];\n    requestMethods: SharedClientSupportedMethod[];\n} /**\n * @monaco\n */\ninterface SharedClientQuery {\n    page: LocalPageRequest;\n    sort: SortQuery;\n    name: string | null;\n    env: Env | null;\n    countryCode: string | null;\n    vendorId: string | null;\n    targetEntities: BeesEntity[];\n    environmentIds: number[];\n} /**\n * @monaco\n */\ninterface ISharedClientService {\n    search(query: SharedClientQuery): Promise<IWrappedResponseLocal<Page<SharedClient>>>;\n    create(payload: SharedClientPayload): Promise<IWrappedResponseLocal<SharedClient>>;\n    delete(client: SharedClient): Promise<IWrappedResponseLocal<any>>;\n    assignEnvironment(client: SharedClient, env: CountryEnvironmentModel): Promise<IWrappedResponseLocal<any>>;\n    unAssignEnvironment(client: SharedClient, env: CountryEnvironmentModel): Promise<IWrappedResponseLocal<any>>;\n    findAllEnvs(client: SharedClient): Promise<IWrappedResponseLocal<any>>;\n    getToken(client: SharedClient): Promise<IWrappedResponseLocal<SharedClientToken>>;\n    createQuery(): SharedClientQuery;\n    findAllAssignedClients(payload: CountryEnvironmentModel): Promise<IWrappedResponseLocal<SharedClient[]>>;\n} /**\n * @monaco\n */\ninterface SharedClient {\n    id: number;\n    name: string;\n    env: Env;\n    countryCode: string | null;\n    vendorId: string | null;\n    targetEntities: BeesEntity[];\n    requestMethods: SharedClientSupportedMethod[];\n} /**\n * @monaco\n */\ninterface BeesToken {\n    token: string;\n    expires: Date;\n    envId: number;\n    serialize(): any;\n    isExpired(): boolean;\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface GrowGroupPayload {\n    name: string;\n    color: string;\n    description: string;\n    dialingMethod: string;\n    missions: GrowGroupMission[];\n    userIds: string[];\n    targetKpi: GrowGroupKpi[];\n    vendors: GrowGroupVendorPayload[];\n} interface GrowGroupVendorPayload {\n    id: string;\n    segmentations: {\n        key: string;\n        values: string[];\n    }[];\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface GrowGroup {\n    id: string;\n    color: string;\n    country: string;\n    createdDate: string;\n    creatorId: string;\n    description: string;\n    dialingMethod: string;\n    missions: GrowGroupMission[];\n    name: string;\n    organization: {\n        active: boolean;\n        id: string;\n    };\n    targetKpi: GrowGroupKpi[];\n    updatedDate: string;\n    updaterId: string;\n    users: GrowGroupUser[];\n    vendors: GrowGroupVendor[];\n} interface GrowGroupMission {\n    missionId: string;\n    missionKey: string;\n    type: string;\n} interface GrowGroupKpi {\n    daily: number;\n    invisible: boolean;\n    monthly: number;\n    type: string;\n} interface GrowGroupUser {\n    id: string;\n    initials: string;\n    name: string;\n} interface GrowGroupVendor {\n    id: string;\n    name: string;\n    segmentations: {\n        key: string;\n        values: string[];\n    }[];\n} /**\n * @monaco\n */\ninterface GrowOrganizationPayload {\n    description: string;\n    logoUrl: string;\n    name: string;\n    userIds: string[];\n    vendorIds: string[];\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface GrowOrganization {\n    active: boolean;\n    country: string;\n    createdDate: string;\n    creatorId: string;\n    description: string;\n    id: string;\n    logoUrl: string;\n    name: string;\n    updatedDate: string;\n    updaterId: string;\n    users: GrowOrganizationUser[];\n    vendors: GrowOrganizationVendor[];\n} interface GrowOrganizationVendor {\n    id: string;\n    name: string;\n    serviceModel: string;\n} interface GrowOrganizationUser {\n    groupAllocated: boolean;\n    id: string; // Email\n    initials: string;\n    name: string;\n} /**\n * @monaco\n */\ninterface GrowUserPayload {\n    firstName: string;\n    lastName: string;\n    email: string;\n    roles: string;\n    country: string;\n    vendorId: string;\n    missionPriority: string[];\n    segmentation: string[];\n    orgId?: string;\n} /**\n * @monaco\n */\ninterface IGrowService {\n    getOrgs(tempToken: string, env: CountryEnvironmentModel, userEmail?: string): Promise<WrappedResponse<GrowOrganization[]>>;\n    convertOrgToOrgPayload(org: GrowOrganization): GrowOrganizationPayload;\n    updateOrg(tempToken: string, orgId: string, env: CountryEnvironmentModel, payload: GrowOrganizationPayload): Promise<WrappedResponse<any>>;\n    getGroups(tempToken: string, orgId: string, env: CountryEnvironmentModel, userEmail?: string): Promise<WrappedResponse<GrowGroup[]>>;\n    createGroup(tempToken: string, orgId: string, env: CountryEnvironmentModel, payload: GrowGroupPayload): Promise<WrappedResponse<any>>;\n    updateGroup(tempToken: string, orgId: string, groupId: string, env: CountryEnvironmentModel, payload: GrowGroupPayload): Promise<WrappedResponse<any>>;\n    createUser(tempToken: string, env: CountryEnvironmentModel, payload: GrowUserPayload[]): Promise<WrappedResponse<any>>;\n} /**\n * @monaco\n */\ninterface IItemService {\n    searchItems(query: ItemsSearchQuery, env?: CountryEnvironmentModel): Promise<WrappedResponse<ItemsSearchResponse>>;\n    saveItems(items: ItemPayload[], env?: CountryEnvironmentModel): Promise<WrappedResponse<any>>;\n    newSearchQuery(): ItemsSearchQuery;\n} interface Container {\n    returnable?: boolean;\n    name: string;\n    itemSize: number;\n    size: number;\n    unitOfMeasurement: string;\n    material: string | null;\n    fullContainerDescription: string;\n} interface Package {\n    packageId: string;\n    id: string; // Copy of packageId\n    unitCount: number;\n    count: number; // Copy of Unit count\n    itemCount: number;\n    name: string;\n    materialType?: string;\n    pack: string;\n    fullPackageDescription: string;\n    unitOfMeasurement: string;\n    size?: number;\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface Item {\n    id: string;\n    brandId: string;\n    brandName: string;\n    sourceData: ItemSourceData; //Manually created object\n    classification: string | null;\n    container: Container;\n    createdDate: string;\n    deleted: boolean;\n    description: string;\n    enabled: boolean;\n    hidden?: boolean;\n    isAlcoholic?: boolean;\n    isNarcotic?: boolean;\n    palletQuantity: number;\n    itemName: string;\n    name: string; // Copy of itemName\n    itemImage: string | null;\n    image: string | null; // Copy of itemImage\n    minOrderQuantity: number;\n    hasBeenUpdated?: boolean;\n    ozVolume?: number;\n    salesRanking: number;\n    uncategorized?: boolean;\n    local?: boolean;\n    newRelease?: boolean;\n    upcCase?: string;\n    upcUnit?: string;\n    upc?: string;\n    sku: string;\n    subBrandName: string | null;\n    updatedAt: string;\n    vendorId: string;\n    manufacturerId?: string;\n    styleType: string | null;\n    distributorProductType: string | null;\n    itemType: string | null;\n    vendorItemId: string;\n    abv?: number;\n    supplier?: string;\n    supplierShortName?: string; // Copy of supplier\n    countryOfOrigin?: string;\n    ibu?: number;\n    itemPlatformId: string;\n    dynamicAttributes?: any;\n    variableWeight: boolean;\n    agingGroup?: string;\n    maxOrderQuantity?: number;\n    variant?: boolean;\n    casingDescription: string;\n    redeemable?: boolean;\n    package: Package;\n    defaultLanguage: string;\n    translations?: {\n        [langCode: string]: ItemTranslation;\n    };\n} interface ItemSourceData {\n    vendorItemId: string;\n    mfrShortCode?: string;\n    mfrItemId?: string;\n} /**\n * @monaco\n */\ninterface ItemsSearchQuery {\n    skus: string[];\n    vendorItemIds: string[];\n    ids: string[];\n    itemPlatformIds: string[];\n    agingGroups: string[];\n    includeDeleted?: boolean;\n    includeDisabled?: boolean;\n    includeAlcoholic?: boolean;\n    includeNarcotic?: boolean;\n    includeHidden?: boolean;\n    manufacturerId?: string;\n    page: PageRequest;\n    vendorId?: string;\n    toBeesQueryParams(): BeesParam[];\n} /**\n * @monaco\n */\ninterface ItemsSearchResponse {\n    items: Item[];\n    pagination: HasNextPagination;\n} /**\n * @monaco\n */\ninterface OrderQuery {\n    page: PageRequest; // page and limit\n    orderStatus: OrderStatus;\n    beesAccountId?: string;\n    deliveryCenterId?: string;\n    endDeliveryDate?: string; // 2022-05-09 inclusive\n    startDeliveryDate?: string; //2022-05-09 inclusive\n    orderBy: OrderOrderbyType[];\n    orderIds: string[];\n    orderStatusCondition: OrderStatusCondition;\n    sort: SortDirection;\n    updatedSince?: string; //ISO date time\n    vendorAccountId?: string;\n    vendorId?: string;\n    vendorOrderNumber?: string;\n    startCreateAt?: string; // ISO date time eg, 2019-10-05T11:10:05.123Z\n    endCreateAt?: string; // ISO date time, eg, 2019-10-05T11:59:59.999Z\n    projection: string[];\n    returnDeletedOrders?: boolean;\n    toBeesQueryParams(): BeesParam[];\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface Order {\n    orderNumber: string;\n    beesAccountId: string;\n    placementDate: string;\n    status: OrderStatus;\n    previousStatus: OrderStatus | null;\n    channel: string;\n    audit: OrderAudit;\n    delivery: any;\n    cancellation?: any;\n    combos: any[];\n    fee?: any;\n    location?: any;\n    empties: any;\n    items: any[];\n    messages: any[];\n    orderGenericInfo: any;\n    payment: any;\n    payments: any;\n    invoicing: any;\n    actionReason: any[];\n    summary: any;\n    vendor: OrderVendorData;\n    orderProperties: any[];\n    deleted: boolean;\n    purchaseId?: number;\n} interface OrderAudit {\n    createAt: string;\n    updateAt: string;\n} interface OrderVendorData {\n    id: string;\n    accountId: string;\n    orderNumber?: string;\n} /**\n * @monaco\n */\ninterface IOrderService {\n    searchOrders(query: OrderQuery, env?: CountryEnvironmentModel): Promise<WrappedResponse<OrderSearchResult>>;\n    fetchAllPages(query: OrderQuery, env?: CountryEnvironmentModel): Promise<Order[]>;\n    createQuery(): OrderQuery;\n} /**\n * @monaco\n */\ninterface ContractPlatformId {\n    vendorId: string;\n    vendorAccountId: string;\n} /**\n * @monaco\n */\ninterface DeliveryCenterPlatformId {\n    vendorId: string;\n    vendorDeliveryCenterId: string;\n} /**\n * @monaco\n */\ninterface EncodedPlatformId {\n    platformId: string;\n} /**\n * @monaco\n */\ninterface InventoryPlatformId {\n    vendorId: string;\n    vendorAccountId: string | null;\n    vendorDeliveryCenterId: string;\n    vendorItemId: string;\n} /**\n * @monaco\n */\ninterface IPlatformIdService {\n    encodeContract(contractPlatformId: ContractPlatformId): Promise<EncodedPlatformId>;\n    encodeDeliveryCenterId(contractPlatformId: DeliveryCenterPlatformId): Promise<EncodedPlatformId>;\n    encodeInventoryId(contractPlatformId: InventoryPlatformId): Promise<EncodedPlatformId>;\n    decodeContractString(platformId: string): Promise<ContractPlatformId>;\n} /**\n * @monaco\n */\nenum PlatformIdType {\n    COMBO = 'COMBO',\n    CONTRACT = 'CONTRACT',\n    ENFORCEMENT = 'ENFORCEMENT',\n    ENFORCEMENT_V2 = 'ENFORCEMENT_V2',\n    ENFORCEMENT_GENERAL = 'ENFORCEMENT_GENERAL',\n    ITEM = 'ITEM',\n    INVENTORY = 'INVENTORY',\n    PROMOTION = 'PROMOTION',\n    DELIVERY_CENTER = 'DELIVERY_CENTER',\n    ASSORTMENT_GENERAL = 'ASSORTMENT_GENERAL',\n    ASSORTMENT_INCLUSION = 'ASSORTMENT_INCLUSION',\n    ASSORTMENT_UNAVAILABLE = 'ASSORTMENT_UNAVAILABLE',\n    COMBO_ACCOUNT = 'COMBO_ACCOUNT',\n    COMBO_DELIVERY = 'COMBO_DELIVERY',\n    EMPTIES = 'EMPTIES'\n} /**\n * @monaco\n */\ninterface IPriceService {\n    searchPrices(queries: SingleItemPriceV3Query[], env?: CountryEnvironmentModel): Promise<WrappedResponse<SingleItemPriceV3[]>>;\n    fetchAllPrices(allItems: Item[], contractId: string, priceListId: string, env?: CountryEnvironmentModel): Promise<SearchAllPricesResponse>;\n    newQuery(itemId: string, contractId: string, priceListId: string): SingleItemPriceV3Query;\n} /**\n * @monaco\n */\ninterface SearchAllPricesResponse {\n    hasErrors: boolean;\n    prices: SingleItemPriceV3[];\n} /**\n * @monaco\n */\ninterface SingleItemPriceV3Query {\n    // Platform ID\n    itemId: string;\n    // Platform ID\n    contractId: string;\n    priceListId: string;\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface SingleItemPriceV3 {\n    vendorItemId: string;\n    sku: string;\n    // Platform ID\n    itemId: string;\n    // Platform ID\n    contractId: string;\n    basePrice: number;\n    minimumPrice: number;\n    measureUnit: string;\n    type: PriceType;\n    quantityPerPallet: number;\n    timezone: string;\n    taxes: SingleItemPriceV3Tax[];\n} interface SingleItemPriceV3Tax {\n    taxId: string;\n    type: string; // % or $, make it enum?\n    value: number;\n    hidden: boolean;\n} /**\n * @monaco\n */\ninterface PromoSearchQuery {\n    vendorIds: string[];\n    page: PageRequest;\n    types: PromoType[];\n    query?: string;\n    ignoreStartDate?: boolean;\n    toBeesParams(): BeesParam[];\n} /**\n * @monaco\n */\ninterface PromoSearchResponse {\n    pagination: HasNextPagination;\n    promotions: Promo[];\n} /**\n * @monaco\n */\nenum PromoType {\n    STEPPED_DISCOUNT = 'STEPPED_DISCOUNT',\n    STEPPED_FREE_GOOD = 'STEPPED_FREE_GOOD',\n    DISCOUNT = 'DISCOUNT',\n    FREE_GOOD = 'FREE_GOOD',\n    FLEXIBLE_DISCOUNT = 'FLEXIBLE_DISCOUNT',\n    FIXED_COMBO = 'FIXED_COMBO'\n} /**\n * @monaco\n */\ninterface PromoV3Payload {\n    vendorPromotionId: string;\n    title: string;\n    description?: string | null;\n    type: PromoType;\n    startDate: string;\n    endDate: string;\n    image?: string | null;\n    budget?: number | null;\n    quantityLimit?: number | null;\n    defaultLanguage?: string | null;\n} /**\n * @monaco\n */\ninterface IPromoService {\n    searchPromos(query: PromoSearchQuery, env?: CountryEnvironmentModel): Promise<BeesResponse<PromoSearchResponse>>;\n    deletePromo(promo: Promo, env?: CountryEnvironmentModel): Promise<BeesResponse<any>>;\n    addPromo(payload: PromoV3Payload[], env?: CountryEnvironmentModel): Promise<WrappedResponse<BeesResponse<any>>>;\n    newQuery(): PromoSearchQuery;\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface Promo {\n    description: string;\n    endDate: string;\n    image: string;\n    platformUniqueIds: PromoPlatformUniqueIds;\n    startDate: string;\n    title: string;\n    type: PromoType;\n    vendorUniqueIds: VendorUniqueIds;\n} interface PromoPlatformUniqueIds {\n    promotionId: string;\n    promotionPlatformId: string;\n} interface VendorUniqueIds {\n    vendorId: string;\n    vendorPromotionId: string;\n} /**\n * @monaco\n */\ninterface BeesResponse<TResponse> {\n    requestTraceId: string;\n    entity: BeesEntity;\n    env: CountryEnvironmentModel;\n    response: TResponse;\n    statusCode: number;\n} /**\n * @monaco\n */\nenum ChallengeExecutionMethod {\n    TAKE_PHOTO = 'TAKE_PHOTO',\n    MARK_COMPLETE = 'MARK_COMPLETE',\n    PURCHASE = 'PURCHASE',\n    PURCHASE_MULTIPLE = 'PURCHASE_MULTIPLE',\n    PURCHASE_MULTIPLE_VOLUME_FIXED = 'PURCHASE_MULTIPLE_VOLUME_FIXED',\n    PURCHASE_MULTIPLE_CURRENCY_FIXED = 'PURCHASE_MULTIPLE_CURRENCY_FIXED',\n    MY_PROGRESS = 'MY_PROGRESS',\n    PURCHASE_SINGLE_VOLUME_FIXED = 'PURCHASE_SINGLE_VOLUME_FIXED'\n} /**\n * @monaco\n */\nenum ChallengeFilterType {\n    BY_ACCOUNT = 'BY_ACCOUNT',\n    DEFAULT_FILTERS = 'DEFAULT_FILTERS'\n} /**\n * @monaco\n */\nenum ChallengeMode {\n    PUBLISHED = 'PUBLISHED',\n    CANCELLED = 'CANCELLED'\n} /**\n * @monaco\n */\nenum ChallengePaginationModel {\n    NUMBERED = 'NUMBERED',\n    LAZY = 'LAZY'\n} /**\n * @monaco\n */\nenum ChallengeType {\n    EXECUTION_COOLER = 'EXECUTION_COOLER',\n    EXECUTION_SHELVES = 'EXECUTION_SHELVES',\n    EXECUTION_PTC = 'EXECUTION_PTC',\n    EXECUTION_ACTIVATION = 'EXECUTION_ACTIVATION'\n} /**\n * @monaco\n */\ninterface IChallengeService {\n    searchChallenges(query: ChallengesQuery, env?: CountryEnvironmentModel): Promise<WrappedResponse<ChallengesSearchResponse>>;\n    cancelChallenge(challengeId: string, tokenOverride: string, env?: CountryEnvironmentModel): Promise<WrappedResponse<any>>;\n    newQuery(): ChallengesQuery;\n} /**\n * @monaco\n */\nenum ChallengeSort {\n    ID = 'ID',\n    TITLE = 'TITLE',\n    POINTS = 'POINTS',\n    START_DATE = 'START_DATE',\n    END_DATE = 'END_DATE',\n    MODE = 'MODE',\n    LAST_MODIFIED = 'LAST_MODIFIED'\n} /**\n * @monaco\n */\ninterface Challenge {\n    id: string;\n    title: string;\n    description: string;\n    detailedDescription: string;\n    image: string;\n    squareImage: string;\n    goodPhotoSample: string;\n    badPhotoSample: string;\n    startDate: string;\n    endDate: string;\n    lastModified: string;\n    campaignId: string;\n    visionId: string;\n    type: ChallengeType;\n    points: number;\n    executionMethod: ChallengeExecutionMethod;\n    filter: any; // Custom Filter Object\n    mode: ChallengeMode;\n    quantityMin: number;\n    currencyMin: number;\n    individualTarget: boolean;\n    filterType: ChallengeFilterType;\n    skus: any[]; //Custom Skus Object\n    items: any[]; //Custom items Object\n} /**\n * @monaco\n */\ninterface ChallengesQuery {\n    paginationModel?: ChallengePaginationModel; //TODO: header\n    acceptLanguage?: string; //TODO: header\n    page: PageRequest;\n    executionMethod: ChallengeExecutionMethod[];\n    challengeIds: string[];\n    modes: ChallengeMode[];\n    vendorIds: string[];\n    startDate?: string; // ISO\n    endDate?: string; // ISO\n    challengeSort?: ChallengeSort;\n    sortingOrder?: SortDirection;\n    regexFilter?: string;\n    filterType?: ChallengeFilterType;\n    withoutFilters?: boolean;\n    groupIds: string[];\n    isDtaas?: boolean;\n    toBeesQueryParams(): BeesParam[];\n} /**\n * @monaco\n */\ninterface ChallengesSearchResponse {\n    content: Challenge[];\n    pagination: Pagination;\n} /**\n * @monaco\n */\nenum RewardsTierLevel {\n    CLUB_B = 'CLUB_B',\n    CLUB_B_BLACK = 'CLUB_B_BLACK',\n    CLUB_B_MAX = 'CLUB_B_MAX'\n} /**\n * @monaco\n */\ninterface SegmentationGroupByAccountModel {\n    accountId: string;\n    groupIds: string[];\n    updatedAt: string;\n} /**\n * @monaco\n */\ninterface SegmentationGroupByAccountQuery {\n    page: PageRequest;\n    accountIds: string[];\n    groupIds: string[];\n    toBeesParams(): BeesParam[];\n} /**\n * @monaco\n */\ninterface SegmentationGroupByAccountSearchResponse {\n    content: SegmentationGroupByAccountModel[];\n    pagination: PaginationV2;\n} /**\n * @monaco\n */\ninterface SegmentationGroupModel {\n    id: string;\n    name: string;\n    description: string;\n    purpose: string;\n    updatedAt: string;\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface SegmentationGroupPayload {\n    groupId: string | null;\n    groupName: string;\n    groupDescription: string | null;\n    purpose: string | null;\n    pocs: SegmentationGroupPocsPayload[];\n} interface SegmentationGroupPocsPayload {\n    pocId: string;\n    points: number | null;\n    quantity: number | null;\n} /**\n * @monaco\n */\ninterface SegmentationGroupQuery {\n    purposes: string[];\n    names: string[];\n    toBeesParams(): BeesParam[];\n} /**\n * @monaco\n */\ninterface ISegmentationService {\n    searchGroups(query: SegmentationGroupQuery, env?: CountryEnvironmentModel): Promise<BeesResponse<SegmentationGroupModel[]>>;\n    searchGroupsByAccount(query: SegmentationGroupByAccountQuery, env?: CountryEnvironmentModel): Promise<BeesResponse<SegmentationGroupByAccountSearchResponse>>;\n    getAccountGroup(accountId: string, env?: CountryEnvironmentModel): Promise<BeesResponse<SegmentationGroupByAccountModel>>;\n    deleteGroup(groupId: string, authTokenOverride: string, env?: CountryEnvironmentModel): Promise<WrappedResponse<BeesResponse<any>>>;\n    deleteAccountGroup(accountId: string, authTokenOverride: string, env?: CountryEnvironmentModel): Promise<WrappedResponse<BeesResponse<any>>>;\n    deleteAccountGroupGroup(accountId: string, groupId: string, authTokenOverride: string, env?: CountryEnvironmentModel): Promise<WrappedResponse<BeesResponse<any>>>;\n    upsertGroup(payload: SegmentationGroupPayload, authTokenOverride: string, env?: CountryEnvironmentModel): Promise<WrappedResponse<BeesResponse<any>>>;\n    newGroupQuery(): SegmentationGroupQuery;\n    newGroupPerAccountQuery(): SegmentationGroupByAccountQuery;\n} /**\n * @monaco\n */\nenum RewardsSettingCalculationType {\n    TOTAL = 'TOTAL',\n    SUBTOTAL = 'SUBTOTAL'\n} /**\n * @monaco\n */\nenum RewardsSettingEarnType {\n    INVOICE = 'INVOICE',\n    ORDER = 'ORDER'\n} /**\n * @monaco\n */\nenum RewardsSettingLevel {\n    ZONE = 'ZONE',\n    VENDOR = 'VENDOR'\n} /**\n * @monaco\n */\nenum RewardsSettingType {\n    DEFAULT_CONFIGURATION = 'DEFAULT_CONFIGURATION',\n    FILTER = 'FILTER',\n    TERMS = 'TERMS',\n    CATEGORIES = 'CATEGORIES',\n    RULES = 'RULES',\n    BEES_BANK = 'BEES_BANK',\n    BENEFITS_BANNER = 'BENEFITS_BANNER',\n    HUB_HEADER = 'HUB_HEADER',\n    ENROLLMENT_PAGE = 'ENROLLMENT_PAGE',\n    TOGGLES = 'TOGGLES',\n    MODULES = 'MODULES'\n} /**\n * @monaco\n */\ninterface RewardsSettingMetaPayload {\n    settingId: string;\n    level: RewardsSettingLevel;\n    tier: RewardsTierLevel;\n    type: RewardsSettingType;\n} /**\n * @monaco\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface RewardsSettingPayload {\n} /**\n * @monaco\n */\ninterface RewardsSettingDefaultConfigurationPayload extends RewardsSettingPayload {\n    initialBalance: number;\n    redeemLimit: number;\n    earnLimit: number;\n    calculationType: RewardsSettingCalculationType;\n    freeGoodEnabled: boolean;\n    earnType: RewardsSettingEarnType;\n    pricePerPoint: number | null;\n    pricePerPointEnabled: boolean | null;\n} /**\n * @monaco\n */\ninterface ImageAndIcon {\n    image: string;\n    icon: string;\n} /**\n * @monaco\n */\ninterface HubHeaderContainer {\n    web: ImageAndIcon;\n    android: ImageAndIcon;\n    ios: ImageAndIcon;\n} /**\n * @monaco\n */\ninterface RewardsSettingHubHeaderPayload extends RewardsSettingPayload {\n    hubHeader: HubHeaderContainer;\n} /**\n * @monaco\n */\ninterface RewardsSettingBenefitsBannerPayload extends RewardsSettingPayload {\n    //TODO: Define this\n    benefitsBanner: any;\n} /**\n * @monaco\n */\ninterface ImageAndLink {\n    imageUrl: string;\n    linkUrl: string;\n} /**\n * @monaco\n */\ninterface BeesBankContainer {\n    web: ImageAndLink;\n    android: ImageAndLink;\n    ios: ImageAndLink;\n} /**\n * @monaco\n */\ninterface RewardsSettingBeesBankPayload extends RewardsSettingPayload {\n    beesBank: BeesBankContainer;\n} /**\n * @monaco\n */\ninterface TogglesContainer {\n    acceptItemsCountMultiplier: boolean | null;\n    findItemBySku: boolean | null;\n    includeItemVariantsForEarning: boolean | null;\n    earningByRule: boolean | null;\n    payWithPointsEnabled: boolean | null;\n    pwpPartialRefund: boolean | null;\n    supportLegacyDtComboCreation: boolean | null;\n    displayOutOfStockProductsLast: boolean | null;\n} /**\n * @monaco\n */\ninterface RewardsSettingsTogglesPayload extends RewardsSettingPayload {\n    toggles: TogglesContainer;\n} /**\n * @monaco\n */\ninterface EnrollmentPagePayloadContainer {\n    content: any;\n} /**\n * @monaco\n */\ninterface RewardsSettingEnrollmentPagePayload extends RewardsSettingPayload {\n    enrollmentPage: EnrollmentPagePayloadContainer;\n} /**\n * @monaco\n */\ninterface TermsAndConditionsContainer {\n    versionId: string;\n    documentDate?: string;\n    startDate?: string;\n    documentURL: string;\n    changeLog: string;\n    lastModified?: string;\n} /**\n * @monaco\n */\ninterface RewardsSettingTermsAndConditionsPayload extends RewardsSettingPayload {\n    termsAndConditions: TermsAndConditionsContainer[];\n} /**\n * @monaco\n */\ninterface RewardRuleItem {\n    itemId: string;\n    vendorItemId: string;\n    vendorId: string;\n    lastModified?: string;\n} /**\n * @monaco\n */\ninterface RewardsRule {\n    ruleId: string;\n    categoryId: string;\n    description: string;\n    skus: string[];\n    items: RewardRuleItem[];\n    amountSpent: number;\n    points: number;\n    lastModified?: string;\n} /**\n * @monaco\n */\ninterface RewardsSettingRulesPayload extends RewardsSettingPayload {\n    rules: RewardsRule[];\n} /**\n * @monaco\n */\ninterface RewardsCategoryBrand {\n    brandId: string;\n    title: string;\n    image: string;\n} /**\n * @monaco\n */\ninterface RewardsCategory {\n    //TODO: Define all fields\n    categoryId: string;\n    brands: RewardsCategoryBrand[];\n} /**\n * @monaco\n */\ninterface RewardsSettingCategoriesPayload extends RewardsSettingPayload {\n    categories: RewardsCategory[];\n} /**\n * @monaco\n */\ninterface RewardsInclusion {\n    potential: string[];\n    segment: string[];\n    subsegment: string[];\n    vendorIds: string[];\n    groupIds: string[];\n} /**\n * @monaco\n */\ninterface RewardsExclusion {\n    groupIds: string[];\n} /**\n * @monaco\n */\ninterface RewardsFilter {\n    inclusion: RewardsInclusion;\n    exclusion: RewardsExclusion;\n} /**\n * @monaco\n */\ninterface RewardsSettingFilterPayload extends RewardsSettingPayload {\n    filter: RewardsFilter;\n} /**\n * @monaco\n */\ninterface RewardsSettingsSearchQuery {\n    levels: RewardsSettingLevel[];\n    page: PageRequest;\n    tiers: RewardsTierLevel[];\n    types: RewardsSettingType[];\n    toBeesParams(): BeesParam[];\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface RewardsSettingsSearchResponse {\n    content: RewardSetting[];\n    pagination: Pagination;\n} interface RewardSetting {\n    settingId: string;\n    type: RewardsSettingType;\n    level: RewardsSettingLevel;\n    tier: RewardsTierLevel;\n    lastModified: string;\n    benefitsBanner?: BenefitsBanner;\n    hubHeader?: HubHeader;\n    beesBank?: BeesBank;\n    toggles?: RewardsToggles;\n    enrollmentPage?: EnrollmentPage;\n    termsAndConditions?: RewardsTermsAndConditions[];\n    rules?: RewardsRule[];\n    categories?: RewardsCategory[];\n    filter?: RewardsFilter;\n    modules?: RewardsModule[];\n    // Default settings\n    initialBalance?: number;\n    redeemLimit?: number;\n    earnLimit?: number;\n    calculationType?: RewardsSettingCalculationType;\n    freeGoodEnabled?: boolean;\n    earnType?: RewardsSettingEarnType;\n    pricePerPoint?: number;\n    pricePerPointEnabled?: boolean;\n} interface BenefitsBanner {\n    bgColor: string;\n    //TODO: More fields here\n    content: BenefitsBannerContent;\n    header: {\n        title: string;\n    };\n    translations: BenefitsBannerTranslation[];\n} interface BenefitsBannerTranslation {\n    languageId: string;\n    header: {\n        title: string;\n    };\n    content: BenefitsBannerTranslationContent;\n} interface BenefitsBannerTranslationContent {\n    sections: BenefitsBannerTranslationContentSection[];\n} interface BenefitsBannerTranslationContentSection {\n    id: string;\n    title: string;\n    items: BenefitsBannerTranslationContentSectionItem[];\n} interface BenefitsBannerTranslationContentSectionItem {\n    id: string;\n    text: string;\n} interface BenefitsBannerContent {\n    bgColor: string;\n    sections: BenefitsBannerSection[];\n} interface BenefitsBannerSection {\n    id: string;\n    title: string;\n    items: BenefitsBannerSectionItem[];\n} interface BenefitsBannerSectionItem {\n    id: string;\n    position: number;\n    text: string;\n} interface HubHeader {\n    web: HubHeaderImagePair;\n    android: HubHeaderImagePair;\n    ios: HubHeaderImagePair;\n} interface HubHeaderImagePair {\n    image: string;\n    icon: string;\n} interface BeesBank {\n    web: BeesBankImageUrlPair;\n    ios: BeesBankImageUrlPair;\n    android: BeesBankImageUrlPair;\n} interface BeesBankImageUrlPair {\n    imageUrl: string;\n    linkUrl: string;\n} interface RewardsToggles {\n    acceptItemsCountMultiplier?: boolean;\n    findItemBySku?: boolean;\n    includeItemVariantsForEarning?: boolean;\n    earningByRule?: boolean;\n    payWithPointsEnabled?: boolean;\n    pwpPartialRefund?: boolean;\n    supportLegacyDtComboCreation?: boolean;\n    displayOutOfStockProductsLast?: boolean;\n} interface EnrollmentPage {\n    //TODO: Define full object\n    content: EnrollmentPageContent;\n    footer: EnrollmentPageFooter;\n    title: string;\n    subtitle: string;\n    translations: EnrollmentPageTranslation[];\n} interface EnrollmentPageTranslation {\n    languageId: string;\n    title: string;\n    subtitle: string;\n    content: EnrollmentPageTranslationContent;\n    footer: EnrollmentPageTranslationFooter;\n} interface EnrollmentPageTranslationContent {\n    items: EnrollmentPageTranslationContentItem[];\n} interface EnrollmentPageTranslationContentItem {\n    id: string;\n    title: string;\n    description: string;\n} interface EnrollmentPageTranslationFooter {\n    textButton: string;\n} interface EnrollmentPageContent {\n    //TODO: Define full object\n    items: EnrollmentPageContentItem[];\n} interface EnrollmentPageContentItem {\n    //TODO: Define full object\n    id: string;\n    title: string;\n    description: string;\n} interface EnrollmentPageFooter {\n    textButton: string;\n} interface RewardsTermsAndConditions {\n    versionId: string;\n    documentDate: string;\n    startDate: string;\n    documentURL: string;\n    changeLog: string;\n    lastModified: string;\n    translations?: RewardsTermsAndConditionsTranslation[];\n} interface RewardsTermsAndConditionsTranslation {\n    languageId: string;\n    documentURL: string;\n} interface RewardRuleItem {\n    itemId: string;\n    vendorItemId: string;\n    vendorId: string;\n    lastModified: string;\n} interface RewardsRule {\n    ruleId: string;\n    categoryId: string;\n    description: string;\n    skus: string[];\n    items: RewardRuleItem[];\n    amountSpent: number;\n    points: number;\n    lastModified: string;\n} interface RewardsCategoryBrand {\n    brandId: string;\n    title: string;\n    image: string;\n} interface RewardsCategory {\n    //TODO: Define all fields\n    categoryId: string;\n    categoryIdWeb: string;\n    storeId: string;\n    description: string;\n    buttonLabel: string;\n    buttonName: string;\n    image: string;\n    title: string;\n    titleClubB: string;\n    subtitle: string;\n    headerImage: string;\n    headerImageClubB: string;\n    position: number;\n    brands: RewardsCategoryBrand[];\n    translations: RewardsCategoryTranslation[];\n} interface RewardsCategoryTranslation {\n    languageId: string;\n    title: string;\n} interface RewardsInclusion {\n    potential: string[];\n    segment: string[];\n    subsegment: string[];\n    vendorIds: string[];\n    groupIds: string[];\n} interface RewardsExclusion {\n    groupIds: string[];\n} interface RewardsFilter {\n    inclusion: RewardsInclusion;\n    exclusion: RewardsExclusion;\n} interface RewardsModule {\n    type: string;\n    title: string;\n    subtitle: string;\n    position: number;\n    enabled: boolean;\n    messages: any;\n    translations?: RewardsModuleTranslation[];\n} interface RewardsModuleTranslation {\n    languageId: string;\n    title: string;\n    subtitle: string;\n    messages: any;\n} /**\n * @monaco\n */\ninterface IRewardsSettingsService {\n    searchSettings(query: RewardsSettingsSearchQuery, env?: CountryEnvironmentModel, tokenOverride?: string): Promise<WrappedResponse<RewardsSettingsSearchResponse>>;\n    upsert(formOutput: RewardsSettingsFormOutput): Promise<WrappedResponse<BeesResponse<any>>>;\n    findById(settingId: string, tier: RewardsTierLevel, level: RewardsSettingLevel, type: RewardsSettingType, env?: CountryEnvironmentModel): Promise<RewardSetting | null>;\n    searchOne(settingId: string, query: RewardsSettingsSearchQuery, env?: CountryEnvironmentModel, page?: number, tokenOverride?: string): Promise<RewardSetting | null>;\n    newQuery(): RewardsSettingsSearchQuery;\n} /**\n * @monaco\n */\ninterface RequestTemplateArg {\n    id: number | null;\n    type: RequestTemplateArgType;\n    keyName: string;\n    value: string | null;\n    name: string;\n} /**\n * @monaco\n */\ninterface RequestTemplateArgView extends RequestTemplateArg {\n    id: number;\n    templateId: number;\n} /**\n * @monaco\n */\ninterface WrappedResponse<T> {\n    isSuccess: boolean;\n    errorResp?: ErrorResponse;\n    response: BeesResponse<T>;\n} interface BeesRx {\n    /** Observable constructor */\n    Observable: typeof Observable;\n    /** Convert observable to promise */\n    firstValueFrom: typeof firstValueFrom;\n} interface HttpClient {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    get<TResponse>(url: string, options = {}): Observable<TResponse>;\n} /**\n * This is where you can add a service that you'd wish to expose to the playground.\n * @monaco\n * @monaco_include_deps\n */\ninterface IBees {\n    /** RxJS utilities */\n    rx: BeesRx;\n    dialogService: IDialogService;\n    localAccountService: ILocalAccountService;\n    accountV1Service: IAccountV1Service;\n    beesContractService: IBeesContractService;\n    envService: ICountryEnvironmentService;\n    orderService: IOrderService;\n    http: HttpClient;\n    grow: IGrowService;\n    vendorService: IVendorV2Service;\n    itemService: IItemService;\n    sharedClients: ISharedClientService;\n    promoService: IPromoService;\n    dealsService: IDealsService;\n    platformIdService: IPlatformIdService;\n    rewardsSettingsService: IRewardsSettingsService;\n    challengeService: IChallengeService;\n    segmentationService: ISegmentationService;\n    deliveryWindowService: IDeliveryWindowService;\n    priceService: IPriceService;\n} /**\n * @monaco\n */\ninterface IVendorV2Service {\n    findById(vendorId: string, env: CountryEnvironmentModel): Promise<VendorV2 | null>;\n} /**\n * @monaco\n * @monaco_include_deps\n */\ninterface VendorV2 {\n    vendorId: string;\n    legalName: string;\n    displayName: string;\n    governmentId: string;\n    serviceModel: string;\n    country: string;\n    bccEmails: string[];\n    addresses: VendorV2Address[];\n    abiVendorId: string;\n    vendorParticipation: {\n        [key: string]: any;\n    };\n    integration: VendorV2Integration;\n    configurations: VendorV2Configurations;\n    createdAt: string;\n    updatedAt: string;\n    tier: string;\n    thumbnailUrl: string;\n    businessModel: string;\n    isManufacturer: boolean;\n    roles: VendorRoleType[];\n} interface VendorV2Address {\n    type: string;\n    address1: string;\n    address2: string;\n    latitude: string;\n    longitude: string;\n    city: string;\n    state: string;\n    zipcode: string;\n} interface VendorV2Integration {\n    ras: VendorRasType;\n    params: {\n        [key: string]: any;\n    };\n    financial: VendorV2FinancialIntegration;\n} interface VendorV2FinancialIntegration {\n    wellsfargo: VendorV2WellsFargoFinancialIntegration;\n} interface VendorV2WellsFargoFinancialIntegration {\n    role: string;\n    biller: string;\n    nameCompany: string;\n    version: string;\n    mobileApiKey: string;\n    webApiKey: string;\n    signature: string;\n    pem: string;\n} interface VendorV2Configurations {\n    features: VendorV2FeaturesConfiguration;\n    inventory: VendorV2InventoryConfigurations;\n    enforcement: VendorV2EnforcementConfigurations;\n    orders: VendorV2OrdersConfiguration;\n    fulfillment: VendorV2FulfilmentConfiguration;\n    pricingEngine: {\n        [key: string]: any;\n    };\n    account: VendorV2AccountConfiguration;\n    items: VendorV2ItemsConfigurations;\n    checkout: VendorV2CheckoutConfigurations;\n    users: VendorV2UsersConfiguration;\n    recommendation: VendorV2RecommendationConfiguration;\n    promotions: VendorV2PromotionsConfiguration;\n} interface VendorV2FeaturesConfiguration {\n    erpHandlesIsKeyAccount: boolean;\n} interface VendorV2InventoryConfigurations {\n    keyAccount: VendorV2InventoryConfiguration;\n    regularAccount: VendorV2InventoryConfiguration;\n} interface VendorV2InventoryConfiguration {\n    solutionType: VendorSolutionType;\n    model: VendorInvModelType;\n} interface VendorV2EnforcementConfigurations {\n    keyAccount: VendorV2EnforcementConfiguration;\n    regularAccount: VendorV2EnforcementConfiguration;\n} interface VendorV2EnforcementConfiguration {\n    enabled: boolean;\n} interface VendorV2OrdersConfiguration {\n    empties: VendorGenericEnabledDisabledEnum;\n    minimumOrder: VendorV2OrderLimit;\n    maximumOrder: VendorV2OrderLimit;\n    paymentMethods: string[];\n    paymentTerms: VendorV2PaymentTerm[];\n    zeroOrder: VendorGenericEnabledDisabledEnum;\n    zeroOrderSettings: VendorV2ZeroOrderSettings;\n    pickupOrderStatusManager: VendorPickupOrderStatusManagerType;\n    upcomingOrderPlacement: VendorGenericEnabledDisabledEnum;\n    split: VendorV2Split;\n} interface VendorV2OrderLimit {\n    type: VendorOrderLimitType;\n    value: number;\n    paymentMethods: string[];\n} interface VendorV2PaymentTerm {\n    termPeriods: VendorV2PaymentTermPeriod[];\n    type: string;\n} interface VendorV2PaymentTermPeriod {\n    days: number;\n} interface VendorV2ZeroOrderSettings {\n    emptiesEnabled: boolean;\n    redemptionsEnabled: boolean;\n} interface VendorV2Split {\n    redeemable: VendorV2RedeemableSplit;\n} interface VendorV2RedeemableSplit {\n    enabled: boolean;\n} interface VendorV2FulfilmentConfiguration {\n    coverageType: VendorFulfilmentCoverageType;\n    acceptedAccountTaxIdTypes: VendorAccountTaxIdType[];\n    segments: VendorV2SegmentsFulfilmentConfiguration;\n    alternativeCoverageType: VendorAlternativeCoverageType;\n    sellToKeyAccounts: boolean;\n    alternativeCoverageRestriction: VendorV2AlternativeCoverageRestriction;\n} interface VendorV2SegmentsFulfilmentConfiguration {\n    enabledSegmentedProducts: boolean;\n    consumptionTypes: VendorV2SegmentConsumptionType[];\n} interface VendorV2SegmentConsumptionType {\n    type: VendorConsumptionType;\n    values: string[];\n} interface VendorV2AlternativeCoverageRestriction {\n    dependsOnContractWithVendor: VendorV2DependsOnContractAlternativeCoverageRestriction;\n} interface VendorV2DependsOnContractAlternativeCoverageRestriction {\n    vendorId: string;\n    acceptedSubsegments: string[];\n} interface VendorV2AccountConfiguration {\n    beesAccountCreationEnabled: boolean;\n    newContractRegistrationEnabled: boolean;\n    newContractRegistration: VendorV2NewContractRegistrationAccountConfiguration;\n} interface VendorV2NewContractRegistrationAccountConfiguration {\n    imageUrl: string;\n    helpUrl: string;\n} interface VendorV2ItemsConfigurations {\n    keyAccount: VendorV2ItemsConfiguration;\n    regularAccount: VendorV2ItemsConfiguration;\n} interface VendorV2ItemsConfiguration {\n    display: VendorV2ItemsDisplayConfiguration;\n} interface VendorV2ItemsDisplayConfiguration {\n    strategy: VendorItemDisplayStrategyType;\n} interface VendorV2CheckoutConfigurations {\n    keyAccount: VendorV2CheckoutConfiguration;\n    regularAccount: VendorV2CheckoutConfiguration;\n} interface VendorV2CheckoutConfiguration {\n    deliveryWindowMethod: VendorDeliveryWindowMethodType;\n} interface VendorV2UsersConfiguration {\n    challenge: VendorV2UsersChallengeConfiguration;\n} interface VendorV2UsersChallengeConfiguration {\n    defaultLanguage: VendorV2UserChallengeLanguage;\n    otherLanguages: VendorV2UserChallengeLanguage[];\n} interface VendorV2UserChallengeLanguage {\n    language: string;\n    hintUrl: string;\n    tip: string;\n    fields: VendorV2UserChallengeLanguageField[];\n} interface VendorV2UserChallengeLanguageField {\n    type: VendorUserChallengeType;\n    title: string;\n    subtitle: string;\n} interface VendorV2RecommendationConfiguration {\n    hasOOSReplacement: boolean;\n    hasUpsellEnabled: boolean;\n    suggestedOrderUseCase: VendorSuggestedOrderUseCaseType;\n} interface VendorV2PromotionsConfiguration {\n    groupedFreeGoodsEnabled: boolean;\n} /**\n * @monaco\n */\ninterface IDialogService {\n    openConfirmDialog(message: string, title?: string, confirmMessage?: string): Observable<boolean>;\n    openAccountPicker(env: CountryEnvironmentModel, hideActions?: boolean): Observable<LocalAccount>;\n    openBeesAccountPicker(env: CountryEnvironmentModel): Observable<AccountV1>;\n    openItemsPicker(payload: IItemsPickerDialogPayload): Observable<Item | undefined>;\n    openShowCodeDialog(code: string, title?: string): Observable<void>;\n    openRequestResultDialog(response: WrappedResponse<any>): Observable<boolean>;\n    openBeesTokenOverrideDialog(env: CountryEnvironmentModel): Observable<BeesToken>;\n    openTemplateArgPrompt(env: CountryEnvironmentModel, arg: RequestTemplateArgView, textarea?: boolean): Promise<string | null>;\n    openPlatformIdDialog(env: CountryEnvironmentModel, type: PlatformIdType): void;\n    openEnvPickerMultiselect(): Promise<CountryEnvironmentModel[]>;\n    openGenericMultiselect<T>(options: GenericPickerOption<T>[], title?: string): Promise<T[]>;\n} /**\n * @monaco\n */\ninterface GenericPickerResponse<T> {\n    items: T[];\n} /**\n * @monaco\n */\ninterface GenericPickerOption<T> {\n    displayName: string;\n    obj: T;\n} /**\n * @monaco\n */\ninterface FieldError {\n    message: string;\n    field: string;\n} /**\n * @monaco\n */\ninterface IWrappedResponseLocal<T> {\n    isSuccess: boolean;\n    errors: FieldError[];\n    response?: T;\n} /**\n * @monaco\n */\ninterface PageRequest {\n    page: number;\n    pageSize: number;\n    toBeesParams(): BeesParam[];\n} /**\n * @monaco\n */\ninterface LocalPageRequest {\n    pageNumber: number;\n    pageSize: number;\n} /**\n * @monaco\n */\ninterface Pagination {\n    page: number;\n    pageSize: number;\n    totalElements: number;\n    totalPages: number;\n} /**\n * @monaco\n */\ninterface PaginationV2 {\n    page: number;\n    pageSize: number;\n    totalElements: number;\n    totalPage: number;\n} /**\n * @monaco\n */\ninterface PageWithPagination<T> {\n    content: T[];\n    pagination: Pagination;\n} /**\n * @monaco\n */\ninterface HasNextPagination {\n    hasNext: boolean;\n    page: number;\n} /**\n * @monaco\n */\ninterface HasMorePagination {\n    hasMore: boolean;\n    page: number;\n} /**\n * @monaco\n */\ninterface Page<T> {\n    content: T[];\n    totalPages: number;\n    totalElements: number;\n    pageable: LocalPageRequest;\n} /**\n * @monaco\n */\ninterface SortQuery {\n    field: string;\n    direction: SortDirection;\n} /**\n * @monaco\n */\nenum SortDirection {\n    ASC = 'ASC',\n    DESC = 'DESC'\n} /**\n * @monaco\n */\ninterface IItemsPickerDialogPayload {\n    env: CountryEnvironmentModel;\n    vendorItemId?: string;\n} /**\n * @monaco\n */\ninterface RewardsSettingsFormOutput {\n    meta: RewardsSettingMetaPayload;\n    setting: RewardsSettingPayload;\n    env?: CountryEnvironmentModel;\n    authTokenOverride?: string;\n} ";